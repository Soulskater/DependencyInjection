var dependencyContainer=function(){var e=[];return{registerType:function(t,n){e.push({name:t,instance:n})},resolveType:function(t){for(var n=0;n<e.length;n++)if(e[n].name===t)return e[n].instance;throw new Error(t+" type is unregistered, cannot inject it!")}}}(),inject=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(dependencyContainer.resolveType(arguments[t]));var n=function(e){if("function"!=typeof e)throw new Error("The base function parameter should be a function, got "+typeof e);return{"class":function(t){return r(t,e)}}},r=function(t,n){if("function"!=typeof t)throw new Error("The constructor parameter should be a function, got "+typeof t);var r=function(){for(var r=0;r<arguments.length;r++)e.push(arguments[r]);n&&(this.base=function(){var e=function(e,t){return function(){e.apply(this,t)}};this.base=new(e(n,arguments))}),t.apply(this,e)};return n?(r.prototype=Object.create(n.prototype),r.constructor=t):(r.prototype=Object.create(t.prototype),r.constructor=t),r};return{base:n,"class":r}},registerNamespace=function(e,t){function n(e,t){return t.hasOwnProperty(e)||(t[e]={}),t[e]}if(t=t||window,"string"!=typeof e)throw new Error("The namespace parameter should be a '.' separated string, got "+typeof e);for(var r=e.split("."),o=t,a=0;a<r.length;a++)o=n(r[a],o)};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlcGVuZGVuY3kvY29udGFpbmVyLmpzIiwiZGVwZW5kZW5jeS9pbmplY3Rvci5qcyIsImRlcGVuZGVuY3kvcmVnaXN0ZXJOYW1lc3BhY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsR0FBQSxxQkFBQSxXQUNBLEdBQUEsS0FFQSxRQUNBLGFBQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxNQUNBLEtBQUEsRUFDQSxTQUFBLEtBR0EsWUFBQSxTQUFBLEdBQ0EsSUFBQSxHQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxJQUNBLEdBQUEsRUFBQSxHQUFBLE9BQUEsRUFDQSxNQUFBLEdBQUEsR0FBQSxRQUdBLE1BQUEsSUFBQSxPQUFBLEVBQUEsaURDaEJBLE9BQUEsV0FFQSxJQUFBLEdBREEsTUFDQSxFQUFBLEVBQUEsRUFBQSxVQUFBLE9BQUEsSUFDQSxFQUFBLEtBQUEsb0JBQUEsWUFBQSxVQUFBLElBRUEsSUFBQSxHQUFBLFNBQUEsR0FDQSxHQUFBLGtCQUFBLEdBQ0EsS0FBQSxJQUFBLE9BQUEsK0RBQUEsR0FHQSxRQUNBLFFBQUEsU0FBQSxHQUNBLE1BQUEsR0FBQSxFQUFBLE1BS0EsRUFBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLGtCQUFBLEdBQ0EsS0FBQSxJQUFBLE9BQUEsNkRBQUEsR0FHQSxJQUFBLEdBQUEsV0FDQSxJQUFBLEdBQUEsR0FBQSxFQUFBLEVBQUEsVUFBQSxPQUFBLElBQ0EsRUFBQSxLQUFBLFVBQUEsR0FHQSxLQUNBLEtBQUEsS0FBQSxXQUNBLEdBQUEsR0FBQSxTQUFBLEVBQUEsR0FDQSxNQUFBLFlBQ0EsRUFBQSxNQUFBLEtBQUEsSUFJQSxNQUFBLEtBQUEsSUFBQSxFQUFBLEVBQUEsY0FHQSxFQUFBLE1BQUEsS0FBQSxHQVdBLE9BUkEsSUFDQSxFQUFBLFVBQUEsT0FBQSxPQUFBLEVBQUEsV0FDQSxFQUFBLFlBQUEsSUFHQSxFQUFBLFVBQUEsT0FBQSxPQUFBLEVBQUEsV0FDQSxFQUFBLFlBQUEsR0FFQSxFQUdBLFFBQ0EsS0FBQSxFQUNBLFFBQUEsSUN0REEsa0JBQUEsU0FBQSxFQUFBLEdBWUEsUUFBQSxHQUFBLEVBQUEsR0FJQSxNQUhBLEdBQUEsZUFBQSxLQUNBLEVBQUEsT0FFQSxFQUFBLEdBYkEsR0FGQSxFQUFBLEdBQUEsT0FFQSxnQkFBQSxHQUNBLEtBQUEsSUFBQSxPQUFBLHVFQUFBLEdBSUEsS0FBQSxHQUZBLEdBQUEsRUFBQSxNQUFBLEtBQ0EsRUFBQSxFQUNBLEVBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxJQUNBLEVBQUEsRUFBQSxFQUFBLEdBQUEiLCJmaWxlIjoiZGktanMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZ21lc3phcm9zIG9uIDEvMjgvMjAxNS5cclxuICovXHJcbnZhciBkZXBlbmRlbmN5Q29udGFpbmVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciByZWdpc3RlcmVkVHlwZXMgPSBbXTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlZ2lzdGVyVHlwZTogZnVuY3Rpb24gKG5hbWUsIGluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHJlZ2lzdGVyZWRUeXBlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXNvbHZlVHlwZTogZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RlcmVkVHlwZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZWdpc3RlcmVkVHlwZXNbaV0ubmFtZSA9PT0gbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdpc3RlcmVkVHlwZXNbaV0uaW5zdGFuY2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG5hbWUgKyBcIiB0eXBlIGlzIHVucmVnaXN0ZXJlZCwgY2Fubm90IGluamVjdCBpdCFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSgpKTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZ21lc3phcm9zIG9uIDEvMjgvMjAxNS5cclxuICovXHJcbnZhciBpbmplY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgX3BhcmFtcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBfcGFyYW1zLnB1c2goZGVwZW5kZW5jeUNvbnRhaW5lci5yZXNvbHZlVHlwZShhcmd1bWVudHNbaV0pKTtcclxuICAgIH1cclxuICAgIHZhciBfYmFzZUZhY3RvcnkgPSBmdW5jdGlvbiAoYmFzZUNsYXNzKSB7XHJcbiAgICAgICAgaWYodHlwZW9mIGJhc2VDbGFzcyAhPT0gXCJmdW5jdGlvblwiKXtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGJhc2UgZnVuY3Rpb24gcGFyYW1ldGVyIHNob3VsZCBiZSBhIGZ1bmN0aW9uLCBnb3QgXCIgKyB0eXBlb2YgYmFzZUNsYXNzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNsYXNzOiBmdW5jdGlvbiAoY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jbGFzc0ZhY3RvcnkoY3RvciwgYmFzZUNsYXNzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIHZhciBfY2xhc3NGYWN0b3J5ID0gZnVuY3Rpb24gKGN0b3IsIGJhc2VDbGFzcykge1xyXG4gICAgICAgIGlmKHR5cGVvZiBjdG9yICE9PSBcImZ1bmN0aW9uXCIpe1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgY29uc3RydWN0b3IgcGFyYW1ldGVyIHNob3VsZCBiZSBhIGZ1bmN0aW9uLCBnb3QgXCIgKyB0eXBlb2YgY3Rvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgX2NsYXNzID0gZnVuY3Rpb24gKGxvY2Fscykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgX3BhcmFtcy5wdXNoKGFyZ3VtZW50c1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChiYXNlQ2xhc3MpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFzZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChmLCBhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFzZSA9IG5ldyAod3JhcHBlcihiYXNlQ2xhc3MsIGFyZ3VtZW50cykpKCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN0b3IuYXBwbHkodGhpcywgX3BhcmFtcyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKGJhc2VDbGFzcykge1xyXG4gICAgICAgICAgICBfY2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShiYXNlQ2xhc3MucHJvdG90eXBlKTtcclxuICAgICAgICAgICAgX2NsYXNzLmNvbnN0cnVjdG9yID0gY3RvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIF9jbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGN0b3IucHJvdG90eXBlKTtcclxuICAgICAgICAgICAgX2NsYXNzLmNvbnN0cnVjdG9yID0gY3RvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF9jbGFzcztcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBiYXNlOiBfYmFzZUZhY3RvcnksXHJcbiAgICAgICAgY2xhc3M6IF9jbGFzc0ZhY3RvcnlcclxuICAgIH07XHJcbn07IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgTUNHIG9uIDIwMTUuMDEuMzEuLlxyXG4gKi9cclxudmFyIHJlZ2lzdGVyTmFtZXNwYWNlID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgb3duZXIpIHtcclxuICAgIG93bmVyID0gb3duZXIgfHwgd2luZG93O1xyXG5cclxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIG5hbWVzcGFjZSBwYXJhbWV0ZXIgc2hvdWxkIGJlIGEgJy4nIHNlcGFyYXRlZCBzdHJpbmcsIGdvdCBcIiArICh0eXBlb2YgbmFtZXNwYWNlKSk7XHJcbiAgICB9XHJcbiAgICB2YXIgc3BsaXR0ZWROYW1lc3BhY2UgPSBuYW1lc3BhY2Uuc3BsaXQoJy4nKTtcclxuICAgIHZhciBwYXJlbnQgPSBvd25lcjtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3BsaXR0ZWROYW1lc3BhY2UubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBwYXJlbnQgPSBlbnN1cmVPYmplY3Qoc3BsaXR0ZWROYW1lc3BhY2VbaV0sIHBhcmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZW5zdXJlT2JqZWN0KG5hbWUsIHBhcmVudCkge1xyXG4gICAgICAgIGlmICghcGFyZW50Lmhhc093blByb3BlcnR5KG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHBhcmVudFtuYW1lXSA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFyZW50W25hbWVdO1xyXG4gICAgfVxyXG59OyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==