var dependencyContainer=function(){var t=[];return{registerType:function(e,n){t.push({name:e,instance:n})},resolveType:function(e){for(var n=0;n<t.length;n++)if(t[n].name===e)return t[n].instance;throw new Error(e+" type is unregistered, cannot inject it!")}}}(),inject=function(){function t(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])}for(var e=[],n=0;n<arguments.length;n++)e.push(dependencyContainer.resolveType(arguments[n]));var r=function(t){if("function"!=typeof t)throw new Error("The base function parameter should be a function, got "+typeof t);return{"class":function(e){return o(e,t)}}},o=function(n,r){if("function"!=typeof n)throw new Error("The constructor parameter should be a function, got "+typeof n);var o=function(){for(var o=e.concat([]),a=0;a<arguments.length;a++)o.push(arguments[a]);r&&(this.base=function(){var e=function(t,e){return function(){t.apply(this,e)}};this.base=new(e(r,arguments)),t(this,this.base)}),n.apply(this,o)};return r?(o.prototype=Object.create(r.prototype),o.constructor=n):(o.prototype=Object.create(n.prototype),o.constructor=n),o};return{base:r,"class":o}},registerNamespace=function(t,e){function n(t,e){return e.hasOwnProperty(t)||(e[t]={}),e[t]}if(e=e||window,"string"!=typeof t)throw new Error("The namespace parameter should be a '.' separated string, got "+typeof t);for(var r=t.split("."),o=e,a=0;a<r.length;a++)o=n(r[a],o)};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlcGVuZGVuY3kvY29udGFpbmVyLmpzIiwiZGVwZW5kZW5jeS9pbmplY3Rvci5qcyIsImRlcGVuZGVuY3kvcmVnaXN0ZXJOYW1lc3BhY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsR0FBQSxxQkFBQSxXQUNBLEdBQUEsS0FFQSxRQUNBLGFBQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxNQUNBLEtBQUEsRUFDQSxTQUFBLEtBR0EsWUFBQSxTQUFBLEdBQ0EsSUFBQSxHQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxJQUNBLEdBQUEsRUFBQSxHQUFBLE9BQUEsRUFDQSxNQUFBLEdBQUEsR0FBQSxRQUdBLE1BQUEsSUFBQSxPQUFBLEVBQUEsaURDaEJBLE9BQUEsV0FNQSxRQUFBLEdBQUEsRUFBQSxHQUNBLElBQUEsR0FBQSxLQUFBLEdBQ0EsRUFBQSxlQUFBLEtBQ0EsRUFBQSxHQUFBLEVBQUEsSUFQQSxJQUFBLEdBREEsTUFDQSxFQUFBLEVBQUEsRUFBQSxVQUFBLE9BQUEsSUFDQSxFQUFBLEtBQUEsb0JBQUEsWUFBQSxVQUFBLElBV0EsSUFBQSxHQUFBLFNBQUEsR0FDQSxHQUFBLGtCQUFBLEdBQ0EsS0FBQSxJQUFBLE9BQUEsK0RBQUEsR0FHQSxRQUNBLFFBQUEsU0FBQSxHQUNBLE1BQUEsR0FBQSxFQUFBLE1BS0EsRUFBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLGtCQUFBLEdBQ0EsS0FBQSxJQUFBLE9BQUEsNkRBQUEsR0FHQSxJQUFBLEdBQUEsV0FFQSxJQUFBLEdBREEsR0FBQSxFQUFBLFdBQ0EsRUFBQSxFQUFBLEVBQUEsVUFBQSxPQUFBLElBQ0EsRUFBQSxLQUFBLFVBQUEsR0FHQSxLQUNBLEtBQUEsS0FBQSxXQUNBLEdBQUEsR0FBQSxTQUFBLEVBQUEsR0FDQSxNQUFBLFlBQ0EsRUFBQSxNQUFBLEtBQUEsSUFJQSxNQUFBLEtBQUEsSUFBQSxFQUFBLEVBQUEsWUFDQSxFQUFBLEtBQUEsS0FBQSxRQUdBLEVBQUEsTUFBQSxLQUFBLEdBV0EsT0FSQSxJQUNBLEVBQUEsVUFBQSxPQUFBLE9BQUEsRUFBQSxXQUNBLEVBQUEsWUFBQSxJQUdBLEVBQUEsVUFBQSxPQUFBLE9BQUEsRUFBQSxXQUNBLEVBQUEsWUFBQSxHQUVBLEVBR0EsUUFDQSxLQUFBLEVBQ0EsUUFBQSxJQ2pFQSxrQkFBQSxTQUFBLEVBQUEsR0FZQSxRQUFBLEdBQUEsRUFBQSxHQUlBLE1BSEEsR0FBQSxlQUFBLEtBQ0EsRUFBQSxPQUVBLEVBQUEsR0FiQSxHQUZBLEVBQUEsR0FBQSxPQUVBLGdCQUFBLEdBQ0EsS0FBQSxJQUFBLE9BQUEsdUVBQUEsR0FJQSxLQUFBLEdBRkEsR0FBQSxFQUFBLE1BQUEsS0FDQSxFQUFBLEVBQ0EsRUFBQSxFQUFBLEVBQUEsRUFBQSxPQUFBLElBQ0EsRUFBQSxFQUFBLEVBQUEsR0FBQSIsImZpbGUiOiJkaS1qcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBnbWVzemFyb3Mgb24gMS8yOC8yMDE1LlxyXG4gKi9cclxudmFyIGRlcGVuZGVuY3lDb250YWluZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHJlZ2lzdGVyZWRUeXBlcyA9IFtdO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVnaXN0ZXJUeXBlOiBmdW5jdGlvbiAobmFtZSwgaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgcmVnaXN0ZXJlZFR5cGVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc29sdmVUeXBlOiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdGVyZWRUeXBlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlZ2lzdGVyZWRUeXBlc1tpXS5uYW1lID09PSBuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdGVyZWRUeXBlc1tpXS5pbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobmFtZSArIFwiIHR5cGUgaXMgdW5yZWdpc3RlcmVkLCBjYW5ub3QgaW5qZWN0IGl0IVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KCkpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBnbWVzemFyb3Mgb24gMS8yOC8yMDE1LlxyXG4gKi9cclxudmFyIGluamVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBfcGFyYW1zID0gW107XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIF9wYXJhbXMucHVzaChkZXBlbmRlbmN5Q29udGFpbmVyLnJlc29sdmVUeXBlKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9vYmplY3RFeHRlbmQoc3JjLCBkZXN0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gZGVzdCkge1xyXG4gICAgICAgICAgICBpZiAoZGVzdC5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHNyY1twcm9wTmFtZV0gPSBkZXN0W3Byb3BOYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2Jhc2VGYWN0b3J5ID0gZnVuY3Rpb24gKGJhc2VDbGFzcykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYmFzZUNsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGJhc2UgZnVuY3Rpb24gcGFyYW1ldGVyIHNob3VsZCBiZSBhIGZ1bmN0aW9uLCBnb3QgXCIgKyB0eXBlb2YgYmFzZUNsYXNzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNsYXNzOiBmdW5jdGlvbiAoY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jbGFzc0ZhY3RvcnkoY3RvciwgYmFzZUNsYXNzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyIF9jbGFzc0ZhY3RvcnkgPSBmdW5jdGlvbiAoY3RvciwgYmFzZUNsYXNzKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjdG9yICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGNvbnN0cnVjdG9yIHBhcmFtZXRlciBzaG91bGQgYmUgYSBmdW5jdGlvbiwgZ290IFwiICsgdHlwZW9mIGN0b3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIF9jbGFzcyA9IGZ1bmN0aW9uIChsb2NhbHMpIHtcclxuICAgICAgICAgICAgdmFyIGFsbFBhcmFtcyA9IF9wYXJhbXMuY29uY2F0KFtdKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGFsbFBhcmFtcy5wdXNoKGFyZ3VtZW50c1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChiYXNlQ2xhc3MpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFzZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChmLCBhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFzZSA9IG5ldyAod3JhcHBlcihiYXNlQ2xhc3MsIGFyZ3VtZW50cykpKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX29iamVjdEV4dGVuZCh0aGlzLCB0aGlzLmJhc2UpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdG9yLmFwcGx5KHRoaXMsIGFsbFBhcmFtcyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKGJhc2VDbGFzcykge1xyXG4gICAgICAgICAgICBfY2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShiYXNlQ2xhc3MucHJvdG90eXBlKTtcclxuICAgICAgICAgICAgX2NsYXNzLmNvbnN0cnVjdG9yID0gY3RvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIF9jbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGN0b3IucHJvdG90eXBlKTtcclxuICAgICAgICAgICAgX2NsYXNzLmNvbnN0cnVjdG9yID0gY3RvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF9jbGFzcztcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBiYXNlOiBfYmFzZUZhY3RvcnksXHJcbiAgICAgICAgY2xhc3M6IF9jbGFzc0ZhY3RvcnlcclxuICAgIH07XHJcbn07IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgTUNHIG9uIDIwMTUuMDEuMzEuLlxyXG4gKi9cclxudmFyIHJlZ2lzdGVyTmFtZXNwYWNlID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgb3duZXIpIHtcclxuICAgIG93bmVyID0gb3duZXIgfHwgd2luZG93O1xyXG5cclxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIG5hbWVzcGFjZSBwYXJhbWV0ZXIgc2hvdWxkIGJlIGEgJy4nIHNlcGFyYXRlZCBzdHJpbmcsIGdvdCBcIiArICh0eXBlb2YgbmFtZXNwYWNlKSk7XHJcbiAgICB9XHJcbiAgICB2YXIgc3BsaXR0ZWROYW1lc3BhY2UgPSBuYW1lc3BhY2Uuc3BsaXQoJy4nKTtcclxuICAgIHZhciBwYXJlbnQgPSBvd25lcjtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3BsaXR0ZWROYW1lc3BhY2UubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBwYXJlbnQgPSBlbnN1cmVPYmplY3Qoc3BsaXR0ZWROYW1lc3BhY2VbaV0sIHBhcmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZW5zdXJlT2JqZWN0KG5hbWUsIHBhcmVudCkge1xyXG4gICAgICAgIGlmICghcGFyZW50Lmhhc093blByb3BlcnR5KG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHBhcmVudFtuYW1lXSA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFyZW50W25hbWVdO1xyXG4gICAgfVxyXG59OyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==